{
	"info": {
		"_postman_id": "a3e804ed-a32a-4772-9940-922c001eb15d",
		"name": "Leaf API",
		"description": "Leaf API Postman Collection\n\n\n- Import Postman Collection\n- Import Environment Variables\n- Register with Leaf \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 0.0.1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Quickstart",
			"item": [
				{
					"name": "Get your Leaf Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f24d5f3-731f-4834-a817-41f5130de148",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"leaf_token\", jsonData.id_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{leaf_email}}\",\n  \"password\": \"{{leaf_pass}}\",\n  \"rememberMe\": true\n}\n// if rememberMe = \"true\", your Leaf Token lasts 30 days. If \"false\", your Leaf Token lasts 24h.",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "https://{{leaf_api_url}}/api/authenticate",
							"protocol": "https",
							"host": [
								"{{leaf_api_url}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all fields",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{leaf_token}}"
							}
						],
						"url": {
							"raw": "https://{{leaf_api_url}}/services/fields/api/fields",
							"protocol": "https",
							"host": [
								"{{leaf_api_url}}"
							],
							"path": [
								"services",
								"fields",
								"api",
								"fields"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all operation files",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4df48c28-7671-4268-9469-04c591a67335",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{leaf_token}}"
							}
						],
						"url": {
							"raw": "https://{{leaf_api_url}}/services/operations/api/files",
							"protocol": "https",
							"host": [
								"{{leaf_api_url}}"
							],
							"path": [
								"services",
								"operations",
								"api",
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get operation file by id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{leaf_token}}"
							}
						],
						"url": {
							"raw": "https://{{leaf_api_url}}/services/operations/api/files/{{file_id}}",
							"protocol": "https",
							"host": [
								"{{leaf_api_url}}"
							],
							"path": [
								"services",
								"operations",
								"api",
								"files",
								"{{file_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get operation file summary",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{leaf_token}}"
							}
						],
						"url": {
							"raw": "https://{{leaf_api_url}}/services/operations/api/files/{{file_id}}/summary",
							"protocol": "https",
							"host": [
								"{{leaf_api_url}}"
							],
							"path": [
								"services",
								"operations",
								"api",
								"files",
								"{{file_id}}",
								"summary"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get operation file images",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{leaf_token}}"
							}
						],
						"url": {
							"raw": "https://{{leaf_api_url}}/services/operations/api/files/{{file_id}}/images",
							"protocol": "https",
							"host": [
								"{{leaf_api_url}}"
							],
							"path": [
								"services",
								"operations",
								"api",
								"files",
								"{{file_id}}",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get merged operation file",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15276307-4210-4ef3-9e3d-903f8d2b0190",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{leaf_token}}"
							}
						],
						"url": {
							"raw": "https://{{leaf_api_url}}/services/operations/api/files?origin=merged",
							"protocol": "https",
							"host": [
								"{{leaf_api_url}}"
							],
							"path": [
								"services",
								"operations",
								"api",
								"files"
							],
							"query": [
								{
									"key": "origin",
									"value": "merged"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all sat-monitored fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ad89a82-0a22-47b2-b1f9-e9bef8da07d9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{leaf_token}}"
							}
						],
						"url": {
							"raw": "https://{{leaf_api_url}}/services/satellite/api/fields",
							"protocol": "https",
							"host": [
								"{{leaf_api_url}}"
							],
							"path": [
								"services",
								"satellite",
								"api",
								"fields"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get satellite images",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ac4e88a-cbd5-40a6-9884-ac8f52ca0867",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{leaf_token}}"
							}
						],
						"url": {
							"raw": "https://{{leaf_api_url}}/services/satellite/api/fields/{{sat_external_id}}/processes",
							"protocol": "https",
							"host": [
								"{{leaf_api_url}}"
							],
							"path": [
								"services",
								"satellite",
								"api",
								"fields",
								"{{sat_external_id}}",
								"processes"
							]
						}
					},
					"response": []
				}
			],
			"description": "Leaf Auth\nGet Leaf Token\nAfter registering with Leaf, you can get your Leaf token, which must be included in all requests to Leaf’s API as an authorization header.\n\tHow to get your Leaf Yoken:\nUpdate current value of \"leaf_email\" variable to your Leaf account email\nUpdate current value of \"leaf_pass\" variable to your Leaf account password\nHit \"Send\"\n\nAn \"id_token\" should be returned. It will be automatically transferred to the current value of \"leaf_token\" to be used in all calls to Leaf's API\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d9b01fc2-fee1-426e-8abf-3fb7549846f6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9a561757-0818-46e9-8926-8226dda892e6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "API Reference",
			"item": [
				{
					"name": "Leaf auth",
					"item": [
						{
							"name": "Get your Leaf Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52a4d143-7983-458a-8279-8f4620fa7450",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"leaf_token\", jsonData.id_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{leaf_email}}\",\n  \"password\": \"{{leaf_pass}}\",\n  \"rememberMe\": true\n}\n// if rememberMe = \"true\", your Leaf Token lasts 30 days. If \"false\", your Leaf Token lasts 24h.",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/api/authenticate",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						}
					],
					"description": "Leaf Auth\nGet Leaf Token\nAfter registering with Leaf, you can get your Leaf token, which must be included in all requests to Leaf’s API as an authorization header.\n\tHow to get your Leaf Yoken:\nUpdate current value of \"leaf_email\" variable to your Leaf account email\nUpdate current value of \"leaf_pass\" variable to your Leaf account password\nHit \"Send\"\n\nAn \"id_token\" should be returned. It will be automatically transferred to the current value of \"leaf_token\" to be used in all calls to Leaf's API\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0f814ba6-5c67-407e-b356-60ca07f2e46e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8ccd0e56-bc57-4201-b0fa-7b891f840b91",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Providers auth",
					"item": [
						{
							"name": "JohnDeere auth",
							"item": [
								{
									"name": "1. Get John Deere auth URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70b52540-9ff0-4d57-a094-2c22bf47c9b5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_id\": \"{{jd_client_id}}\",\n    \"client_secret\": \"{{jd_client_secret}}\",\n    \"client_redirect_url\": \"{{jd_redirect_url}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_auth_jd}}/get_url",
											"protocol": "https",
											"host": [
												"{{leaf_auth_jd}}"
											],
											"path": [
												"get_url"
											]
										},
										"description": "Access token (and refresh token) request as detailed on step 4 of the medium post"
									},
									"response": []
								},
								{
									"name": "2. Get John Deere Tokens",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85ee429a-26d6-4054-96dd-332ab5b6d7c3",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"jd_access_token\", jsonData.access_token);",
													"pm.environment.set(\"jd_refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{leaf_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_id\": \"{{jd_client_id}}\",\n    \"client_secret\": \"{{jd_client_secret}}\",\n    \"response_url\": \"{{jd_response_url}}\",\n    \"client_redirect_url\": \"{{jd_redirect_url}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_auth_jd}}/get_token",
											"protocol": "https",
											"host": [
												"{{leaf_auth_jd}}"
											],
											"path": [
												"get_token"
											]
										},
										"description": "Access token (and refresh token) request as detailed on step 4 of the medium post"
									},
									"response": []
								},
								{
									"name": "3. Add John Deere Credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25d34980-9d5b-4ff8-9afe-f504955559f2",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"jd_credentials_id\", jsonData.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"clientKey\": \"{{jd_client_id}}\",\n    \"clientSecret\": \"{{jd_client_secret}}\",\n    \"accessToken\": \"{{jd_access_token}}\",\n    \"refreshToken\": \"{{jd_refresh_token}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/usermanagement/api/john-deere-credentials",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"usermanagement",
												"api",
												"john-deere-credentials"
											]
										}
									},
									"response": []
								}
							],
							"description": "John Deere Auth\nTo get a better sense of the authentication process with John Deere and the results, check our Medium Post (https://medium.com/leaf-agriculture/how-to-use-leafs-api-to-retrieve-machinery-data-from-john-deere-fb1ba331d089)\n1. Get John Deere auth URL\nIn Step 1 we will be generating tokens from John Deere. The goal In step 2 is we will get our john deere token_id and token_secret\n\nToken Verifier\nIn step 1 we will get a temporary \"token verifier\" from John Deere that confirms a user’s authentication of your application to access their John Deere data and generate credentials. We get that verifier by going through their authentication flow (oauth2).\nBefore generating the authentication URL, please:\nUpdate current value of \"jd_client_key\" to your app's client key on John Deere\nUpdate current value of \"jd_client_secret\" to your app's client secret on John Deere\nUpdate current value of \"jd_callback_url\" to your app's callback_url on John Deere\n\nThen, to generate the authentication URL your application will send to your user so they can authorize access to their account files you can use the included step 2 in the Postman Collection. Change \"client_key\" and \"client_secret\" variables to yours received from John Deere when you created an app on your developer account with them and redirect_uri to a uri the \"token verifier\" will be sent after the user authorizes your application.\nHit \"Send\".\nRedirect your user to the url included in the response.\nThey will authenticate and be redirected to the redirect_url\nCopy the entire url you were redirected to. It looks like:\nhttps://leafagriculture.com.br/?oauth_token=TOKEN&oauth_verifier=CODE\nPaste it in the environment variable \"jd_response_url\"\n2. Get John Deere Tokens\nAfter updating the “jd_response_url” in Postman you can submit your credentials and receive your tokens:\nHit \"Send\"\n\n\"token_id\" and \"token_secret_key\" will be automatically transferred to \"jd_token_id\" and \"jd_token_secret\" environment variables and will be used in the next step.\n\n3. Add John Deere ID\nNow we can create a Developer-User pair credentials ID that will allow you to access your user’s John Deere data. We first add the John Deere credentials to Leaf API, just:\nHit \"Send\"\nAll the info needed has already been filled automatically in Step 2.\n\nAn \"id\" for the credentials you just created will be returned. This \"id\" will be automatically transferred to the value of \"jd_credentials_id\" to be used in the next step.\n",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "02090b65-f6c8-45e5-947d-70167843b6bc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f25cd1ad-e5e8-40ad-a3df-38232c06b509",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ClimateFieldView auth",
							"item": [
								{
									"name": "1. Get CFV auth URL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f737472e-0d3d-4a45-b7e8-64e22d781d82",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"client_id\": \"{{cfv_client_id}}\",\n\t\"redirect_uri\": \"{{cfv_redirect_url}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_auth_cfv}}/url",
											"protocol": "https",
											"host": [
												"{{leaf_auth_cfv}}"
											],
											"path": [
												"url"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Get CFV Tokens",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d177aa61-1665-4287-bd99-369ff00ffc96",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"cfv_access_token\", jsonData.access_token);",
													"pm.environment.set(\"cfv_refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "683d1294-755a-4078-bb79-991553766fea",
												"exec": [
													"// Here we calculate the Authorization Header, it is calculated as:",
													"// Basic {base64_encode($clientId:$clientSecret)} ",
													"",
													"var id = pm.environment.get('cfv_client_id');",
													"var sec = pm.environment.get('cfv_client_secret');",
													"",
													"var id_sec = id + \":\" + sec;",
													"var id_sec_64 = btoa(id_sec);  // encodes to Base64",
													"",
													"var cfv_auth_header = \"Basic \";",
													"var cfv_auth_header = cfv_auth_header + id_sec_64;",
													"",
													"pm.environment.set('cfv_auth_header', cfv_auth_header);",
													"",
													"// to see if it's working, check that ",
													"// clientId being Aladdin and clientSecret being OpenSesame, ",
													"// will generate the Authorization Header below",
													"// Basic QWxhZGRpbjpPcGVuU2VzYW1l"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{cfv_auth_header}}",
												"description": "Basic base64(clientId:clientSecret)",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "code",
													"value": "{{cfv_code}}",
													"description": "get code from redirect url and put here",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{cfv_redirect_url}}",
													"description": "same as when on the url you sent to user ",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "https://api.climate.com/api/oauth/token",
											"protocol": "https",
											"host": [
												"api",
												"climate",
												"com"
											],
											"path": [
												"api",
												"oauth",
												"token"
											]
										},
										"description": "Access token (and refresh token) request as detailed on step 4 of the medium post"
									},
									"response": []
								},
								{
									"name": "3. Add CFV credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db2acb03-d3eb-4c7f-adaa-729f7799ce8e",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"cfv_credentials_id\", jsonData.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"clientId\": \"{{cfv_client_id}}\",\n  \"clientSecret\": \"{{cfv_client_secret}}\",\n  \"apiKey\": \"{{cfv_api_key}}\",\n  \"refreshToken\": \"{{cfv_refresh_token}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/usermanagement/api/climate-field-view-credentials",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"usermanagement",
												"api",
												"climate-field-view-credentials"
											]
										}
									},
									"response": []
								}
							],
							"description": "Climate Field View Auth\nTo get a better sense of the authentication process with Climate Field View and the results, check our Medium Post (https://medium.com/leaf-agriculture/how-to-use-leafs-api-to-retrieve-machinery-data-from-climate-fieldview-dda921f40291)\n\n1. Get CFV auth URL\nWe will be generating a url to redirect your user to authenticate with Climate.\nUpdate environment variables \"cfv_client_id\" and \"cfv_client_secret\" to your CFV developer account credentials\nUpdate environment variable \"cfv_redirect_url\" to your application's backend\nRedirect your user to the script's output url.\nThey will authenticate and be redirected to the redirect_uri\nA code will be sent to that cfv_redirect_url. We will need this code Step 2.\nCopy the code value \nNote: this code expires after 1 minute.\n\nPaste code value to environment variable \"cfv_code\"\n\n2. Get CFV tokens\nHit \"Send\"\n\nA lot of information will be returned. The important ones are \"access_token\" and \"refresh_token. These will be automatically transferred to \"cfv_access_token\" and \"cfv_refresh_token\" environment variables and will be used in the next step.\n\t\n3. Add CFV credentials\nNow we can create a Developer-User pair credentials ID that will allow you to access your user’s Climate data. We first add the Climate credentials to Leaf API, to do that:\nHit \"Send\"\n\nAn \"id\" for the credentials you just created will be returned. This \"id\" will be automatically transferred to the value of \"cfv_credentials_id\" to be used in the next step.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9ccfecfd-d37d-41ec-a0c5-cfaed5873f74",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "db08b680-1d3b-4d88-84ee-832c6abc5811",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Trimble auth",
							"item": [
								{
									"name": "Create Trimble Credential",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f5d9966-6ed7-4024-a54e-6c00635ac1a4",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"trimble_credentials_id\", jsonData.id);",
													"",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "  {\n    \"userName\": \"your users username\",\n    \"password\": \"your users password\",\n    \"applicationName\": \"Identity\",\n    \"serviceIdentityId\": \"your apps identity id\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/usermanagement/api/trimble-credentials",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"usermanagement",
												"api",
												"trimble-credentials"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trimble Credential",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "196fbd84-98e5-40af-91a3-61e4b38c5ac0",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/usermanagement/api/trimble-credentials/{{trimble_credentials_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"usermanagement",
												"api",
												"trimble-credentials",
												"{{trimble_credentials_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Trimble Credential",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8deb885b-ac5f-4c0c-9edf-63b02e8efcbe",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([204]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/usermanagement/api/trimble-credentials/{{trimble_credentials_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"usermanagement",
												"api",
												"trimble-credentials",
												"{{trimble_credentials_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all Trimble Credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a8228d6-e010-4a0d-9843-6f911affe06e",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/usermanagement/api/trimble-credentials/",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"usermanagement",
												"api",
												"trimble-credentials",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Leaf User Trimble",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6580861b-8818-40ca-aaa0-2a7ff07fb9e1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{leaf-user-id}}\",\n    \"name\": \"ericsegala\",\n    \"email\": \"eric@withleaf.io\",\n\t\"trimbleCredentials\": \n\t{\n\t\t\"id\": \"{{trimble-credentials-id}}\"\n\t}\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"usermanagement",
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CNHi auth",
							"item": [
								{
									"name": "1. Get CNHI auth URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c47f8d2e-711c-4788-9b22-fca460e7d53e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_id\": \"{{cnhi_client_id}}\",\n    \"client_secret\": \"{{cnhi_client_secret}}\",\n    \"client_redirect_url\": \"{{cnhi_client_redirect_url}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://0rtwuz7da8.execute-api.us-east-1.amazonaws.com/get_url",
											"protocol": "https",
											"host": [
												"0rtwuz7da8",
												"execute-api",
												"us-east-1",
												"amazonaws",
												"com"
											],
											"path": [
												"get_url"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Get CNHI Refresh Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89d32f89-b627-448d-9c4f-4a7db49507bc",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"cnhi_refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_id\": \"{{cnhi_client_id}}\",\n    \"client_secret\": \"{{cnhi_client_secret}}\",\n    \"client_redirect_url\": \"{{cnhi_client_redirect_url}}\",\n    \"response_url\": \"{{cnhi_response_url}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_auth_cnhi}}/get_token",
											"protocol": "https",
											"host": [
												"{{leaf_auth_cnhi}}"
											],
											"path": [
												"get_token"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Add CNHi Credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8af9f31d-369a-4273-bc6a-fbc7f1770516",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"cnhi_credentials_id\", jsonData.id);",
													"",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"clientId\": \"{{cnhi_client_id}}\" ,\n  \"clientSecret\": \"{{cnhi_client_secret}}\",\n  \"refreshToken\": \"{{cnhi_refresh_token}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/usermanagement/api/cn-hi-credentials",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"usermanagement",
												"api",
												"cn-hi-credentials"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Leaf User",
					"item": [
						{
							"name": "Create Leaf User",
							"item": [
								{
									"name": "With only JD",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c2fcd6b-78dc-4586-b111-ed7520866f43",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"leaf_user_id\", jsonData.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e80c59d7-bd9d-4cf1-a6d6-14bfe2490ea4",
												"exec": [
													"pm.environment.set(\"random_name\", _.random(1073741824, 2147483648))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Albert Einstein{{random_name}}\",\n  \"email\": \"Albert Einstein{{random_name}}@sharklasers.com\",\n  \"address\": \"New York, NY 10004, US\",\n  \"phone\": \"123-456-7890\",\n  \"johnDeereCredentials\": {\n  \t\"id\":\"{{jd_credentials_id}}\"\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"usermanagement",
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "With only CFV",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a97b16aa-9dfc-4b36-91ee-2e4169b716fb",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"leaf_user_id\", jsonData.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2bf44696-3ae8-492e-99d9-49e926437430",
												"exec": [
													"pm.environment.set(\"random_name\", _.random(1073741824, 2147483648))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"JohnHopkins{{random_name}}\",\n  \"email\": \"JohnHopkins{{random_name}}@sharklasers.com\",\n  \"address\": \"New York, NY 10004, US\",\n  \"phone\": \"123-456-7890\",\n  \"climateFieldViewCredentials\": {\n\t\"id\":\"{{cfv_credentials_id}}\"\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"usermanagement",
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "With CFV and JD",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddcf4f55-b4dc-44a0-a327-c50b5e1c90bb",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"leaf_user_id\", jsonData.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "df92f67e-7f0a-4a5a-917e-eda224e78ac5",
												"exec": [
													"pm.environment.set(\"random_name\", _.random(1073741824, 2147483648))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Carl Sagan{{random_name}}\",\n  \"email\": \"CarlSagan{{random_name}}@sharklasers.com\",\n  \"address\": \"New York, NY 10004, US\",\n  \"phone\": \"123-456-7890\",\n  \"johnDeereCredentials\": {\n  \t\"id\":\"{{jd_credentials_id}}\"\n  },\n  \"climateFieldViewCredentials\": {\n    \"id\":\"{{cfv_credentials_id}}\"\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"usermanagement",
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Without credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d498dc26-203c-4161-b28e-e9d5cb164a54",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"leaf_user_id\", jsonData.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4978ea78-5e72-4a25-b3c3-0158c39f7dcc",
												"exec": [
													"pm.environment.set(\"random_name\", _.random(1073741824, 2147483648))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Ada Lovelace{{random_name}}\",\n  \"email\": \"AdaLovelace{{random_name}}@sharklasers.com\",\n  \"address\": \"New York, NY 10004, US\",\n  \"phone\": \"123-456-7890\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"usermanagement",
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get all Leaf Users",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e8e59755-6fff-45e9-a706-1f55c5ab229a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6c696e5f-8a75-45f8-a5eb-b7fdfab666a5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"usermanagement",
										"api",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get specific Leaf User",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"usermanagement",
										"api",
										"users",
										"{{leaf_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Leaf User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68c0b560-58db-4359-b762-f8f2f3be40e3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"{{leaf_user_id}}\",\n  \"name\": \"{{random_name}}\",\n  \"email\": \"{{random_number}}@sharklasers.com\",\n  \"address\": \"New York, NY 10004, US\",\n  \"phone\": \"123-456-7890\",\n  \"climateFieldViewCredentials\": {\n  \t\"id\":\"{{cfv_credentials_id}}\"\n  },\n  \"johnDeereCredentials\": {\n  \t\"id\": \"{{jd_credentials_id}}\"\n  },\n  \"cnhiCredentials\": {\n  \t\"id\": \"{{cnhi_credentials_id}}\"\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"usermanagement",
										"api",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Leaf User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86e43fdc-2444-4721-a364-8fede03e2c26",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/37845f49-3f74-42f1-86c9-6a42a02c439c",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"usermanagement",
										"api",
										"users",
										"37845f49-3f74-42f1-86c9-6a42a02c439c"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Leaf User \t\nCreate Leaf User\nNow we have to attach credentials to a Leaf User. To do so, we can create a Leaf user and attach our John Deere and/or Climate Field View credentials via the credentials id. We can also attach credentials from other companies to this same user to query all available data by Grower/Farm/Field regardless of brand. \nUpdate (optional) fields \"address\", \"email\", \"name\" and \"phone\" with your user's information.\nWe have automatically included our “jd_credentials_id” to this call and attached it to this user.\nHit \"Send\" \n\n\tAlong with other information returned, there is an \"id\". This \"id\" is the leaf_user_id that will be used in the next (final) Step to query and access files.\n\nUpdate Leaf User\n\tTo update a Leaf User, let's say to add another provider credentials or change the user's address, we can use this PUT request. Since this method overwrites, remember to send all the user's information along with the information you want to add or update. For example, if you want to add John Deere credentials to a user that already has ClimateFieldView credentials, remember to specify both credentials ids.\n\nGet specific Leaf User\n\tWith this endpoint you can query all information on a specific Leaf User, such as their address, email, credentials, etc. To do so, update the value of the environment variable \"leaf_user_id\" to the Leaf User id you want to query.\n\nGet all Leaf Users\n\tWith this endpoint you can query all information on all your Leaf Users, such as their address, email, credentials, etc. Just hit 'send'.\n\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "73bb875c-10ba-4d1f-9000-85e87784a70e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2945f3ad-3bff-434a-848f-ba776595b934",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fields",
					"item": [
						{
							"name": "Get all fields",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/fields/api/fields?leafUserId={{leaf_user_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"fields",
										"api",
										"fields"
									],
									"query": [
										{
											"key": "leafUserId",
											"value": "{{leaf_user_id}}",
											"description": "your Leaf User id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a field",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/fields/{{field_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"fields",
										"api",
										"users",
										"{{leaf_user_id}}",
										"fields",
										"{{field_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc6c0799-3cc6-43eb-aec0-26c259a794b1",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"field_id\", jsonData.id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "63960e88-8b6d-44d1-b942-8a162619a772",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"geometry\": {\n    \"coordinates\": \n    [[[\n        [-89.84392762184143,39.72439389620628],\n        [-89.84388470649719,39.71943436012731],\n        [-89.83928203582764,39.71951688444436],\n        [-89.83936786651611,39.725392361998416],\n        [-89.84392762184143,39.72439389620628]\n    ]]],\n    \"type\": \"MultiPolygon\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/fields",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"fields",
										"api",
										"users",
										"{{leaf_user_id}}",
										"fields"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all operations of a field",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/fields/{{field_id}}/operations",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"fields",
										"api",
										"users",
										"{{leaf_user_id}}",
										"fields",
										"{{field_id}}",
										"operations"
									],
									"query": [
										{
											"key": "origin",
											"value": "provider",
											"description": "provider, merged or automerged",
											"disabled": true
										},
										{
											"key": "operationType",
											"value": "harvested",
											"description": "Supported values: applied, harvested, planted, other",
											"disabled": true
										},
										{
											"key": "operationCrop",
											"value": null,
											"description": "crop code/number of the operation. Requires `operationProvider`",
											"disabled": true
										},
										{
											"key": "operationProvider",
											"value": "JohnDeere",
											"description": "The name of the company provider of the operations. Supported values: ClimateFieldView, CNHI, JohnDeere, Trimble",
											"disabled": true
										},
										{
											"key": "operationStartTime",
											"value": "2018-10-22T20:25",
											"description": "ISO 8601 date-time instant that filters operations that started at it or after it (must be in the past or present)",
											"disabled": true
										},
										{
											"key": "operationEndTime",
											"value": "2018-10-22T20:25",
											"description": "ISO 8601 date-time instant that filters operations that ended at it or before it (must be in the past or present)",
											"disabled": true
										},
										{
											"key": "organizationId",
											"value": null,
											"description": "Grower's organization id from the provider (string)",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"description": "Pagination parameter for selecting the page of the result (integer)",
											"disabled": true
										},
										{
											"key": "size",
											"value": "30",
											"description": "Pagination parameter that specifies the size of each page (integer)",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "asc",
											"description": "Sorting order of the results. Can be multivalue, the former takes precedence over the later. Can also specify order as `asc` or `desc` with `asc` being the default. Example: id,desc",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an operation of a field",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/fields/{{field_id}}/operations/{{file_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"fields",
										"api",
										"users",
										"{{leaf_user_id}}",
										"fields",
										"{{field_id}}",
										"operations",
										"{{file_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Fields by geometry",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f28c28e-630d-490e-97e3-51ed70794ebe",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"geometry\":\n   {\n     \"type\": \"MultiPolygon\",\n     \"coordinates\": [[[\n        [-89.84392762184143,39.72439389620628],\n        [-89.84388470649719,39.71943436012731],\n        [-89.83928203582764,39.71951688444436],\n        [-89.83936786651611,39.725392361998416],\n        [-89.84392762184143,39.72439389620628]\n    ]]]\n   }\n }\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/fields/api/fields/query/intersects",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"fields",
										"api",
										"fields",
										"query",
										"intersects"
									]
								},
								"description": "If there are fields that intersect with the given geometry, they will be returned."
							},
							"response": []
						},
						{
							"name": "Get intersection of fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f726d0e-bea6-43ba-ba43-99eb497bceb0",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"{{field_id}}\", \"{{field_id}}\"]\n\n// [\"field1 id\", \"field2 id\", \"fieldN id\"]\n\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/fields/intersect",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"fields",
										"api",
										"users",
										"{{leaf_user_id}}",
										"fields",
										"intersect"
									]
								},
								"description": "If there are fields that intersect with the given geometry, they will be returned."
							},
							"response": []
						},
						{
							"name": "Delete a field",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/fields/{{field_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"fields",
										"api",
										"users",
										"{{leaf_user_id}}",
										"fields",
										"{{field_id}}"
									]
								},
								"description": "This will request to delete the field which its id is holded by variable `field-1-id`. You can specify a different\nfield by replacing `{{field-1-id}}` in the URL below."
							},
							"response": []
						},
						{
							"name": "Get all farms",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/fields/api/farms",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"fields",
										"api",
										"farms"
									],
									"query": [
										{
											"key": "leafUserId",
											"value": "{{leaf_user_id}}",
											"description": "your Leaf User id",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"description": "Pagination parameter for selecting the page of the result (integer)",
											"disabled": true
										},
										{
											"key": "size",
											"value": "30",
											"description": "Pagination parameter that specifies the size of each page (integer)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a farm",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/farms/{{farm_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"fields",
										"api",
										"users",
										"{{leaf_user_id}}",
										"farms",
										"{{farm_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all growers",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/fields/api/growers",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"fields",
										"api",
										"growers"
									],
									"query": [
										{
											"key": "leafUserId",
											"value": "{{leaf_user_id}}",
											"description": "your Leaf User id",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"description": "Pagination parameter for selecting the page of the result (integer)",
											"disabled": true
										},
										{
											"key": "size",
											"value": "30",
											"description": "Pagination parameter that specifies the size of each page (integer)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a grower",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/fields/api/growers/{{grower_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"fields",
										"api",
										"growers",
										"{{grower_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Query Operations by Field\nTo query all operations that happened in a specific field (step 2), we first need to create that field (step 1). Then, Leaf will automatically detect operations of that field based on the operations' and on the field's coordinates. This process usually takes about 30 minutes.\n1. Create Field\nHere we need to specify a leafUserId (that will be the Leaf User owner of that field), a externalId (that will be the name we give to the field) and the geojson geometry of the field (location). After creating the field we can query it (step 2) \n2. Get operations' ids by Field\nTo query all operations that happened in a specific field, just update the environment variable \"field_external_id\" to the field id you want to query files\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dcd4d915-2ab5-48d2-8ed2-78f2c04a49d4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "73963dd6-667a-4708-8dd2-17c2f01441bf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Operation files",
					"item": [
						{
							"name": "Get all files",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0c9a243-29bd-43a4-85ce-d0be64989d73",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/files?leafUserId={{leaf_user_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"files"
									],
									"query": [
										{
											"key": "leafUserId",
											"value": "{{leaf_user_id}}",
											"description": "filter by leaf_user"
										},
										{
											"key": "provider",
											"value": "Leaf",
											"description": "JohnDeere, ClimateFieldView, Leaf, CNHi or Trimble",
											"disabled": true
										},
										{
											"key": "origin",
											"value": "automerged",
											"description": "provider, merged or automerged",
											"disabled": true
										},
										{
											"key": "status",
											"value": "processed",
											"description": "processed, processing or failed",
											"disabled": true
										},
										{
											"key": "size",
											"value": "20",
											"description": "maximum number of files returned per page (default is 20)",
											"disabled": true
										},
										{
											"key": "createdTime",
											"value": "2018-10-22T20:25",
											"description": "(iso 8601 date-time) get files that were processed by Leaf after \"createdTime\"",
											"disabled": true
										},
										{
											"key": "operationStart",
											"value": "2018-10-22T20:25",
											"description": "(iso 8601 date-time) get operations that started after operationStart",
											"disabled": true
										},
										{
											"key": "operationEnd",
											"value": "2019-10-22T20:25",
											"description": "(iso 8601 date-time) get operations that ended before operationEnd",
											"disabled": true
										},
										{
											"key": "operationType",
											"value": "harvested",
											"description": "planted, applied or harvested",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get specific file by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/files/{{file_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"files",
										"{{file_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get file images",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/files/{{file_id}}/images",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"files",
										"{{file_id}}",
										"images"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get file summary",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/files/{{file_id}}/summary",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"files",
										"{{file_id}}",
										"summary"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get file units",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/files/{{file_id}}/units",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"files",
										"{{file_id}}",
										"units"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload operation file",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"description": "select your file",
											"type": "file",
											"src": []
										}
									],
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/files?leafUserId={{leaf_user_id}}&provider=Leaf&fileFormat=GEOJSON",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"files"
									],
									"query": [
										{
											"key": "leafUserId",
											"value": "{{leaf_user_id}}"
										},
										{
											"key": "provider",
											"value": "Leaf"
										},
										{
											"key": "fileFormat",
											"value": "GEOJSON"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Merge operation files",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae962e1d-a932-4b23-8ea3-c3004951833b",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"merged_file_id\", jsonData.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ids\": [\n    \"{{operation_1_id}}\",\n    \"{{operation_2_id}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/files/merge",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"files",
										"merge"
									]
								},
								"description": "Make sure you are merging operations of the \n- same operationType (PLANTED, HARVESTED or APPLIED)\n- same Leaf User"
							},
							"response": []
						}
					],
					"description": "Get Operation Files\n1. Query & access all files\nWith this endpoint you can query all files of all your users (or you can filter by user as well, or by provider, by operation_date and much more). Select and update which params (filters) you want to apply before querying files and just hit \"send\"\n2. Query & access specific file\nTo query for a specific operation file, you just have to update the value of the environment variable \"file_id\" and hit \"send\"\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "39437f2a-d25e-49e2-8af6-8e81729c6cbf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8afebd6e-ac8d-425e-a9de-4ac12503b4ea",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Satellite",
					"item": [
						{
							"name": "Create sat-monitored field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ef3b211-493f-48be-b4ea-d86c26b34697",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"externalId\": \"{{sat_external_id}}\",\n  \"daysBefore\": 30,\n  \"geometry\": {\n    \"type\": \"MultiPolygon\",\n    \"coordinates\": \n    [[[\n        [-89.84392762184143,39.72439389620628],\n        [-89.84388470649719,39.71943436012731],\n        [-89.83928203582764,39.71951688444436],\n        [-89.83936786651611,39.725392361998416],\n        [-89.84392762184143,39.72439389620628]\n    ]]]\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/satellite/api/fields",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"satellite",
										"api",
										"fields"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all sat-monitored fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9bdedf8-67a7-4a2d-a1c4-1e0d91bdf8c3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/satellite/api/fields",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"satellite",
										"api",
										"fields"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sat images of field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c09280b-8dbd-4ad9-a528-a9c5444ba78e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/satellite/api/fields/{{sat_external_id}}/processes?size=30",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"satellite",
										"api",
										"fields",
										"{{sat_external_id}}",
										"processes"
									],
									"query": [
										{
											"key": "size",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sat-monitored field geometry",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52beac13-20b1-4e6d-b0d5-1f95f10748ed",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/satellite/api/fields/{{sat_external_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"satellite",
										"api",
										"fields",
										"{{sat_external_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sat-monitored field history dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b67ebfe-bd31-405a-bfbd-1c474be74a0c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/satellite/api/fields/{{sat_external_id}}/history?start=2020-01-01&end=2020-03-03",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"satellite",
										"api",
										"fields",
										"{{sat_external_id}}",
										"history"
									],
									"query": [
										{
											"key": "start",
											"value": "2020-01-01"
										},
										{
											"key": "end",
											"value": "2020-03-03"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete sat-monitored field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "436a52c1-2d00-4e9c-8a8e-993be4ab90ba",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/satellite/api/fields/{{sat_external_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"satellite",
										"api",
										"fields",
										"{{sat_external_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Converters",
					"item": [
						{
							"name": "Convert Shapefile to GeoJSON",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"description": "You should select your file before running",
											"type": "file",
											"src": []
										}
									],
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/converters/api/shapefile-geojson",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"converters",
										"api",
										"shapefile-geojson"
									],
									"query": [
										{
											"key": "leafUserId",
											"value": "{{leaf_user_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Convert CN1 to GeoJSON",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/home/douglas/Downloads/sample.cn1.zip"
										}
									],
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/converters/api/cn1-geojson",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"converters",
										"api",
										"cn1-geojson"
									],
									"query": [
										{
											"key": "leafUserId",
											"value": "{{leaf_user_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Convert DAT to GeoJSON",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/home/douglas/Downloads/growmark_asPlanted_id.dat"
										}
									],
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/converters/api/datclimate-geojson",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"converters",
										"api",
										"datclimate-geojson"
									],
									"query": [
										{
											"key": "leafUserId",
											"value": "{{leaf_user_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Convert Trimble to GeoJSON",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/home/douglas/Downloads/TMX_AgData.zip"
										}
									],
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/converters/api/trimble-geojson",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"converters",
										"api",
										"trimble-geojson"
									],
									"query": [
										{
											"key": "leafUserId",
											"value": "{{leaf_user_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Convert GeoJSON to Shapefile",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/home/douglas/leaf/postman/postman-collections/sample.geojson"
										}
									],
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/converters/api/geojson-shapefile",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"converters",
										"api",
										"geojson-shapefile"
									],
									"query": [
										{
											"key": "leafUserId",
											"value": "{{leaf_user_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Convert GeoJSON to ISO11783",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "sample.geojson"
										}
									],
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/converters/api/geojson-iso11783",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"converters",
										"api",
										"geojson-iso11783"
									],
									"query": [
										{
											"key": "leafUserId",
											"value": "{{leaf_user_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Convert GeoJSON to PNG",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/home/douglas/leaf/postman/postman-collections/sample.geojson"
										}
									],
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/converters/api/geojson-png",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"converters",
										"api",
										"geojson-png"
									],
									"query": [
										{
											"key": "leafUserId",
											"value": "{{leaf_user_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6821285d-8069-46c2-b81a-15c006568f15",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "adc36c21-3073-4c2d-b1d6-3f1935b7e0ed",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "98cc64af-e8f4-48bd-95c8-3d9c7d5ed3ba",
			"key": "leaf_api_url",
			"value": "api.withleaf.io"
		},
		{
			"id": "b0386e48-5e46-4ba0-a078-672a8d6b7e9b",
			"key": "leaf_auth_jd",
			"value": "94kvge1ot0.execute-api.us-east-1.amazonaws.com"
		},
		{
			"id": "0e8fdec9-9530-4384-be67-323c95f781a2",
			"key": "leaf_auth_cfv",
			"value": "xrfbaf8gd1.execute-api.us-east-1.amazonaws.com"
		},
		{
			"id": "dfb160c2-48ba-4d3a-af10-4edbb7c80c5f",
			"key": "leaf_auth_cnhi",
			"value": "0rtwuz7da8.execute-api.us-east-1.amazonaws.com"
		}
	],
	"protocolProfileBehavior": {}
}